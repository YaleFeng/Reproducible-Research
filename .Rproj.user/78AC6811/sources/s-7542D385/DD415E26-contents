---
title: "Reproducible Research: Peer Assessment 1"
output: 
  html_document:
    keep_md: true
---


## Loading and preprocessing the data

Reading the data into activity data frame and show some summary statistics

```{r reading, cache=TRUE}
activity = read.csv("activity.csv")
```

Processing the Data

```{r date_conversion, message=FALSE}
activity$day <- weekdays(as.Date(activity$date))
activity$DateTime<- as.POSIXct(activity$date, format="%Y-%m-%d")
require(dplyr)
total_day <- activity %>% group_by(date) %>%summarise(total_steps=sum(steps,na.rm=TRUE),na=mean(is.na(steps))) %>% print
clean <- activity[!is.na(activity$steps),]
```


## What is mean total number of steps taken per day?

```{r sumTable,message=FALSE}
sumTable <- aggregate(activity$steps ~ activity$date, FUN=sum, )
colnames(sumTable)<- c("Date", "Steps")
```

Make a histogram of the total number of steps taken each day

```{r hist,fig.width=12}
hist(sumTable$Steps, breaks=5, xlab="Steps", main = "Total Steps per Day")
```

Calculate and report the mean and median of the total number of steps taken per day

```{r summary}
mean_steps <- as.integer(mean(sumTable$Steps))
mean_steps
median_steps <- as.integer(median(sumTable$Steps))
median_steps
```

The average number of steps taken each day was **`r mean_steps`** steps.
The median number of steps taken each day was **`r median_steps`** steps.

## What is the average daily activity pattern?

Make a time series plot (i.e. type = "l") of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all days (y-axis)  

```{r daily, fig.width=12}
library(dplyr,quietly = TRUE)
daily_patterns <- activity %>% group_by(interval) %>% summarise(average=mean(steps,na.rm=TRUE))
plot(x = 1:nrow(daily_patterns),y = daily_patterns$average,type = "l",
     col = "red", xaxt = "n",xlab="Intervals", 
     ylab = "Average for given interval across all days")
axis(1,labels=daily_patterns$interval[seq(1,288,12)],
     at = seq_along(daily_patterns$interval)[seq(1,288,12)])
```

Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps?

```{r daily2}
max_numb_steps_interval <- filter(daily_patterns,average==max(average))
```

Interval **`r max_numb_steps_interval$interval`** contains on average the maximum number of steps (**`r round(max_numb_steps_interval$average,2)` steps**).

## Imputing missing values

Calculate and report the total number of missing values in the dataset (i.e. the total number of rows with NAs)

```{r missing}
na_number <- sum(is.na(activity$steps))
na_number
percentage_na <- mean(is.na(activity$steps))
percentage_na
```

Total number of missing values in the dataset amounts to **`r na_number` ** (what is **`r round(percentage_na*100,1)`** % of total observations).

Devise a strategy for filling in all of the missing values in the dataset

My strategy for filling in NAs will be to substitute the missing steps with the average 5-minute interval based on the day of the week.

Create a new dataset that is equal to the original dataset but with the missing data filled in.
```{r na_imputing, cache=TRUE}
without_NAs <- numeric(nrow(activity))
for (i in 1:nrow(activity))
{
        if (is.na(activity[i,"steps"])==TRUE)
            {
                    without_NAs[i]<-filter(daily_patterns,interval==activity[i,"interval"]) %>% select(average)
            } 
        else
            {
                    without_NAs[i]<-activity[i,"steps"]
            }
                    
}
activity_without_NAs<-mutate(activity,steps_no_NAs=without_NAs)
```

Below code is just to verify if process of imputing missing values correctly preserved original values (lines with no NAs)   
```{r test_NAs}
check <- filter(activity_without_NAs,!is.na(steps)) %>% mutate(ok = (steps==steps_no_NAs))
mean(check$ok)
```
Make a histogram of the total number of steps taken each day and Calculate and report the mean and median total number of steps taken per day

```{r histogram_no_NAs}
total_day_noNAs <- activity_without_NAs %>% mutate(steps_no_NAs=as.numeric(steps_no_NAs)) %>% group_by(date) %>% summarise(total_steps=sum(steps_no_NAs))
hist(total_day_noNAs$total_steps,col="blue",breaks=20,main="Total steps per day",xlab="Steps per day")
abline(v=median(total_day$total_steps),lty=3, lwd=2, col="black")
legend(legend="median","topright",lty=3,lwd=2,bty = "n")
```

```{r summary_no_NAs}
summary(total_day_noNAs$total_steps)
```

## Are there differences in activity patterns between weekdays and weekends?

Create a new factor variable in the dataset with two levels – “weekday” and “weekend” indicating whether a given date is a weekday or weekend day

```{r weekday}
library(lubridate)
is_weekday <-function(date){
        if(wday(date)%in%c(1,7)) result<-"weekend"
        else
                result<-"weekday"
        result
}
activity_without_NAs <- mutate(activity_without_NAs,date=ymd(date)) %>% mutate(day=sapply(date,is_weekday))
table(activity_without_NAs$day)
```

Make a panel plot containing a time series plot (i.e. type = "l") of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all weekday days or weekend days (y-axis)


```{r weekend_comparison, cache=TRUE, fig.width=10}
library(ggplot2)
daily_patterns <- activity_without_NAs %>% mutate(day=factor(day,levels=c("weekend","weekday")),steps_no_NAs=as.numeric(steps_no_NAs)) %>% group_by(interval,day) %>% summarise(average=mean(steps_no_NAs))
qplot(interval,average,data=daily_patterns,geom="line",facets=day~.)
```
